apiVersion: batch/v1
kind: CronJob
metadata:
  name: log-extractor
  namespace: cs
spec:
  schedule: "* * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: runner
            image: python:3.10
            command:
            - /bin/sh
            - -c
            - |
              #!/bin/bash
              chmod +x /scripts/*
              mkdir -p /data/extracted_logs
              wget https://dl.min.io/client/mc/release/linux-amd64/mc
              chmod +x ./mc && mv ./mc /bin/ && mc --version
              echo "###   Connecting to new bucket..."
              mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
              while true; do
                output=$(mc ls myminio/new-log-archives)
                if echo "$output" | grep -q "\.tar\.gz"; then
                  echo "###   Found new archive files!"
                  echo "$output" | while read -r line; do
                    file_name=$(echo "$line" | awk '{print $6}')
                    subfolder="${file_name%.*.*}"
                    echo "###   Starting extraction of file $file_name"
                    /scripts/downloader_extractor.sh $file_name
                    echo "###   Building grafana dashboard for file $file_name"
                    python grafana_dashboard_automation.py --subfolder $subfolder
                    echo "###   Done handling file $file_name"
                  done
                  exit 1
                else
                  echo "###   No archive files found, trying again..."
                  sleep 10
                fi
              done
            volumeMounts:
            - name: extracted-logs
              mountPath: /data
            - name: scripts
              mountPath: /scripts
            env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: rootPassword
            - name: GRAFANA_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-password
            - name: GRAFANA_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-user
          restartPolicy: OnFailure
          volumes:
          - name: extracted-logs
            persistentVolumeClaim:
              claimName: extracted-logs
          - name: scripts
            configMap:
              name: scripts
